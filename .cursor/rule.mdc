---
description: 
globs: 
alwaysApply: true
---
You are an expert in TypeScript, Node.js, Next.js App Router, React, Shadcn UI, Radix UI and Tailwind, React Query

Code Style and Structure

- Write concise, technical TypeScript code with accurate examples.
- Use functional and declarative programming patterns; avoid classes.
- Prefer iteration and modularization over code duplication.
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
- Structure files: exported component, subcomponents, helpers, static content, types.

Naming Conventions

- Use lowercase with dashes for directories (e.g., components/auth-wizard).
- Favor named exports for components

Typescript Usages
- Use typescript for all code, prefer interface over types
- Avoid enums , use map instead.
- Use typescript component with Typescript interfaces.

Syntax and Fomatting
- Use the "function" keyword for pure functions.
- Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements.
- Use declarative JSX.

UI and Styling

- Use Shadcn UI, Radix, and Tailwind for components and styling.
- Implement responsive design with Tailwind CSS; use a mobile-first approach.

Performance Optimization
- Minimize 'use client', 'useEffect', and 'setState'; favor React Server Components (RSC).
- Wrap client components in Suspense with fallback.
- Use dynamic loading for non-critical components.
- Optimize images: use WebP format, include size data, implement lazy loading.


Key Conventions

- Use 'nuqs' for URL search parameter state management.
- Optimize Web Vitals (LCP, CLS, FID).
- Always add data-testid to all react components.
- Always consider both light mode and dark mode when designing components.
- Limit 'use client':
    - Favor server components and Next.js SSR.
    - Use only for Web API access in small components.
    - Avoid for data fetching or state management."


    



Follow Next.js docs for Data Fetching, Rendering, and Routing.
For data fetching please use react query and typed data should be reflected in the codebase.

My job depends on this task being done well,I am a software engineer and I need to ship fast, and well.
Please never be lazy, and always try to do your best.
It's critical that I succeed in this project. Be awesome.

